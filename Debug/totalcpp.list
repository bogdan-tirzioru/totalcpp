
totalcpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000590  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000828  08000828  00010828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000858  08000858  00010858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800085c  0800085c  0001085c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  24000000  08000860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000034  24000068  080008c8  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400009c  080008c8  0002009c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000e5a  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000004cf  00000000  00000000  00020ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000150  00000000  00000000  000213c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000118  00000000  00000000  00021510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000024e3  00000000  00000000  00021628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00001218  00000000  00000000  00023b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000ebd50  00000000  00000000  00024d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00110a73  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000008ec  00000000  00000000  00110ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000068 	.word	0x24000068
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08000810 	.word	0x08000810

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400006c 	.word	0x2400006c
 80002d4:	08000810 	.word	0x08000810

080002d8 <_ZN6DriverC1Ev>:
 */

#ifndef DRIVER_HPP_
#define DRIVER_HPP_
#include "stm32h750xx.h"
class Driver{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	4a04      	ldr	r2, [pc, #16]	; (80002f4 <_ZN6DriverC1Ev+0x1c>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4618      	mov	r0, r3
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	08000854 	.word	0x08000854

080002f8 <_ZN3DioC1Ev>:
#include "driver.hpp"

class Dio:public Driver{
	bool value=false;
public:
	Dio(void){;};
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4618      	mov	r0, r3
 8000304:	f7ff ffe8 	bl	80002d8 <_ZN6DriverC1Ev>
 8000308:	4a05      	ldr	r2, [pc, #20]	; (8000320 <_ZN3DioC1Ev+0x28>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2200      	movs	r2, #0
 8000312:	711a      	strb	r2, [r3, #4]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4618      	mov	r0, r3
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	08000848 	.word	0x08000848

08000324 <_ZN3Dio6ToggleEv>:
	void Toggle(void){value= !value;};
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	791b      	ldrb	r3, [r3, #4]
 8000330:	f083 0301 	eor.w	r3, r3, #1
 8000334:	b2da      	uxtb	r2, r3
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	711a      	strb	r2, [r3, #4]
 800033a:	bf00      	nop
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr

08000346 <_ZN3Dio5SetupEv>:
	void Setup(void){;};
 8000346:	b480      	push	{r7}
 8000348:	b083      	sub	sp, #12
 800034a:	af00      	add	r7, sp, #0
 800034c:	6078      	str	r0, [r7, #4]
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
	...

0800035c <_ZN5TimerC1Ev>:
#ifndef TIMER_HPP_
#define TIMER_HPP_

class Timer: public Driver{
public:
	Timer(void){;};
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4618      	mov	r0, r3
 8000368:	f7ff ffb6 	bl	80002d8 <_ZN6DriverC1Ev>
 800036c:	4a03      	ldr	r2, [pc, #12]	; (800037c <_ZN5TimerC1Ev+0x20>)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4618      	mov	r0, r3
 8000376:	3708      	adds	r7, #8
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	0800083c 	.word	0x0800083c

08000380 <_ZN5Timer5SetupEv>:
	void Setup(void){;};
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr

08000394 <_ZN3CanC1Ev>:
#ifndef CAN_HPP_
#define CAN_HPP_
#include "driver.hpp"
class Can: public Driver{
public:
	Can(void){;};
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4618      	mov	r0, r3
 80003a0:	f7ff ff9a 	bl	80002d8 <_ZN6DriverC1Ev>
 80003a4:	4a03      	ldr	r2, [pc, #12]	; (80003b4 <_ZN3CanC1Ev+0x20>)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4618      	mov	r0, r3
 80003ae:	3708      	adds	r7, #8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	08000830 	.word	0x08000830

080003b8 <_ZN3Can5SetupEv>:
	void Setup(void){;};
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr

080003cc <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80003cc:	b590      	push	{r4, r7, lr}
 80003ce:	b08b      	sub	sp, #44	; 0x2c
 80003d0:	af00      	add	r7, sp, #0
    /* Loop forever */
	Dio *dio =new Dio{};
 80003d2:	2008      	movs	r0, #8
 80003d4:	f000 f8bd 	bl	8000552 <_Znwj>
 80003d8:	4603      	mov	r3, r0
 80003da:	461c      	mov	r4, r3
 80003dc:	4620      	mov	r0, r4
 80003de:	f7ff ff8b 	bl	80002f8 <_ZN3DioC1Ev>
 80003e2:	623c      	str	r4, [r7, #32]
	Can *can1 = new Can{};
 80003e4:	2004      	movs	r0, #4
 80003e6:	f000 f8b4 	bl	8000552 <_Znwj>
 80003ea:	4603      	mov	r3, r0
 80003ec:	461c      	mov	r4, r3
 80003ee:	4620      	mov	r0, r4
 80003f0:	f7ff ffd0 	bl	8000394 <_ZN3CanC1Ev>
 80003f4:	61fc      	str	r4, [r7, #28]
	Timer *timeros = new Timer{};
 80003f6:	2004      	movs	r0, #4
 80003f8:	f000 f8ab 	bl	8000552 <_Znwj>
 80003fc:	4603      	mov	r3, r0
 80003fe:	461c      	mov	r4, r3
 8000400:	4620      	mov	r0, r4
 8000402:	f7ff ffab 	bl	800035c <_ZN5TimerC1Ev>
 8000406:	61bc      	str	r4, [r7, #24]
	Driver * pDriver[]={ dynamic_cast<Driver *>(dio),
			dynamic_cast<Driver *>(timeros),
			dynamic_cast<Driver *>(can1)};
 8000408:	6a3b      	ldr	r3, [r7, #32]
 800040a:	603b      	str	r3, [r7, #0]
 800040c:	69bb      	ldr	r3, [r7, #24]
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	69fb      	ldr	r3, [r7, #28]
 8000412:	60bb      	str	r3, [r7, #8]
	for(auto &iter:pDriver)
 8000414:	463b      	mov	r3, r7
 8000416:	617b      	str	r3, [r7, #20]
 8000418:	697b      	ldr	r3, [r7, #20]
 800041a:	627b      	str	r3, [r7, #36]	; 0x24
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	330c      	adds	r3, #12
 8000420:	613b      	str	r3, [r7, #16]
 8000422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000424:	693b      	ldr	r3, [r7, #16]
 8000426:	429a      	cmp	r2, r3
 8000428:	d00d      	beq.n	8000446 <main+0x7a>
 800042a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800042c:	60fb      	str	r3, [r7, #12]
	{
		iter->Setup();
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4610      	mov	r0, r2
 800043c:	4798      	blx	r3
	for(auto &iter:pDriver)
 800043e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000440:	3304      	adds	r3, #4
 8000442:	627b      	str	r3, [r7, #36]	; 0x24
 8000444:	e7ed      	b.n	8000422 <main+0x56>
	}
	for(;;)
		{
			dio->Toggle();
 8000446:	6a38      	ldr	r0, [r7, #32]
 8000448:	f7ff ff6c 	bl	8000324 <_ZN3Dio6ToggleEv>
 800044c:	e7fb      	b.n	8000446 <main+0x7a>

0800044e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0
  return 1;
 8000452:	2301      	movs	r3, #1
}
 8000454:	4618      	mov	r0, r3
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <_kill>:

int _kill(int pid, int sig)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	b082      	sub	sp, #8
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
 8000466:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000468:	f000 f8aa 	bl	80005c0 <__errno>
 800046c:	4603      	mov	r3, r0
 800046e:	2216      	movs	r2, #22
 8000470:	601a      	str	r2, [r3, #0]
  return -1;
 8000472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000476:	4618      	mov	r0, r3
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}

0800047e <_exit>:

void _exit (int status)
{
 800047e:	b580      	push	{r7, lr}
 8000480:	b082      	sub	sp, #8
 8000482:	af00      	add	r7, sp, #0
 8000484:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000486:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800048a:	6878      	ldr	r0, [r7, #4]
 800048c:	f7ff ffe7 	bl	800045e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000490:	e7fe      	b.n	8000490 <_exit+0x12>
	...

08000494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800049c:	4a14      	ldr	r2, [pc, #80]	; (80004f0 <_sbrk+0x5c>)
 800049e:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <_sbrk+0x60>)
 80004a0:	1ad3      	subs	r3, r2, r3
 80004a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004a8:	4b13      	ldr	r3, [pc, #76]	; (80004f8 <_sbrk+0x64>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d102      	bne.n	80004b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004b0:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <_sbrk+0x64>)
 80004b2:	4a12      	ldr	r2, [pc, #72]	; (80004fc <_sbrk+0x68>)
 80004b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004b6:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <_sbrk+0x64>)
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4413      	add	r3, r2
 80004be:	693a      	ldr	r2, [r7, #16]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d207      	bcs.n	80004d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004c4:	f000 f87c 	bl	80005c0 <__errno>
 80004c8:	4603      	mov	r3, r0
 80004ca:	220c      	movs	r2, #12
 80004cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004d2:	e009      	b.n	80004e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <_sbrk+0x64>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004da:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <_sbrk+0x64>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4413      	add	r3, r2
 80004e2:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <_sbrk+0x64>)
 80004e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004e6:	68fb      	ldr	r3, [r7, #12]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3718      	adds	r7, #24
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	24080000 	.word	0x24080000
 80004f4:	00000400 	.word	0x00000400
 80004f8:	24000084 	.word	0x24000084
 80004fc:	240000a0 	.word	0x240000a0

08000500 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000500:	480d      	ldr	r0, [pc, #52]	; (8000538 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000502:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000504:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000508:	480c      	ldr	r0, [pc, #48]	; (800053c <LoopForever+0x6>)
  ldr r1, =_edata
 800050a:	490d      	ldr	r1, [pc, #52]	; (8000540 <LoopForever+0xa>)
  ldr r2, =_sidata
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <LoopForever+0xe>)
  movs r3, #0
 800050e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000510:	e002      	b.n	8000518 <LoopCopyDataInit>

08000512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000516:	3304      	adds	r3, #4

08000518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800051a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800051c:	d3f9      	bcc.n	8000512 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800051e:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000520:	4c0a      	ldr	r4, [pc, #40]	; (800054c <LoopForever+0x16>)
  movs r3, #0
 8000522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000524:	e001      	b.n	800052a <LoopFillZerobss>

08000526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000528:	3204      	adds	r2, #4

0800052a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800052a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800052c:	d3fb      	bcc.n	8000526 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800052e:	f000 f84d 	bl	80005cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000532:	f7ff ff4b 	bl	80003cc <main>

08000536 <LoopForever>:

LoopForever:
  b LoopForever
 8000536:	e7fe      	b.n	8000536 <LoopForever>
  ldr   r0, =_estack
 8000538:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800053c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000540:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 8000544:	08000860 	.word	0x08000860
  ldr r2, =_sbss
 8000548:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 800054c:	2400009c 	.word	0x2400009c

08000550 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000550:	e7fe      	b.n	8000550 <ADC1_2_IRQHandler>

08000552 <_Znwj>:
 8000552:	2801      	cmp	r0, #1
 8000554:	bf38      	it	cc
 8000556:	2001      	movcc	r0, #1
 8000558:	b510      	push	{r4, lr}
 800055a:	4604      	mov	r4, r0
 800055c:	4620      	mov	r0, r4
 800055e:	f000 f859 	bl	8000614 <malloc>
 8000562:	b930      	cbnz	r0, 8000572 <_Znwj+0x20>
 8000564:	f000 f81c 	bl	80005a0 <_ZSt15get_new_handlerv>
 8000568:	b908      	cbnz	r0, 800056e <_Znwj+0x1c>
 800056a:	f000 f821 	bl	80005b0 <abort>
 800056e:	4780      	blx	r0
 8000570:	e7f4      	b.n	800055c <_Znwj+0xa>
 8000572:	bd10      	pop	{r4, pc}

08000574 <__cxa_pure_virtual>:
 8000574:	b508      	push	{r3, lr}
 8000576:	f000 f80d 	bl	8000594 <_ZSt9terminatev>

0800057a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800057a:	b508      	push	{r3, lr}
 800057c:	4780      	blx	r0
 800057e:	f000 f817 	bl	80005b0 <abort>
	...

08000584 <_ZSt13get_terminatev>:
 8000584:	4b02      	ldr	r3, [pc, #8]	; (8000590 <_ZSt13get_terminatev+0xc>)
 8000586:	6818      	ldr	r0, [r3, #0]
 8000588:	f3bf 8f5b 	dmb	ish
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	24000000 	.word	0x24000000

08000594 <_ZSt9terminatev>:
 8000594:	b508      	push	{r3, lr}
 8000596:	f7ff fff5 	bl	8000584 <_ZSt13get_terminatev>
 800059a:	f7ff ffee 	bl	800057a <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080005a0 <_ZSt15get_new_handlerv>:
 80005a0:	4b02      	ldr	r3, [pc, #8]	; (80005ac <_ZSt15get_new_handlerv+0xc>)
 80005a2:	6818      	ldr	r0, [r3, #0]
 80005a4:	f3bf 8f5b 	dmb	ish
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	24000088 	.word	0x24000088

080005b0 <abort>:
 80005b0:	b508      	push	{r3, lr}
 80005b2:	2006      	movs	r0, #6
 80005b4:	f000 f902 	bl	80007bc <raise>
 80005b8:	2001      	movs	r0, #1
 80005ba:	f7ff ff60 	bl	800047e <_exit>
	...

080005c0 <__errno>:
 80005c0:	4b01      	ldr	r3, [pc, #4]	; (80005c8 <__errno+0x8>)
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	24000004 	.word	0x24000004

080005cc <__libc_init_array>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	4d0d      	ldr	r5, [pc, #52]	; (8000604 <__libc_init_array+0x38>)
 80005d0:	4c0d      	ldr	r4, [pc, #52]	; (8000608 <__libc_init_array+0x3c>)
 80005d2:	1b64      	subs	r4, r4, r5
 80005d4:	10a4      	asrs	r4, r4, #2
 80005d6:	2600      	movs	r6, #0
 80005d8:	42a6      	cmp	r6, r4
 80005da:	d109      	bne.n	80005f0 <__libc_init_array+0x24>
 80005dc:	4d0b      	ldr	r5, [pc, #44]	; (800060c <__libc_init_array+0x40>)
 80005de:	4c0c      	ldr	r4, [pc, #48]	; (8000610 <__libc_init_array+0x44>)
 80005e0:	f000 f916 	bl	8000810 <_init>
 80005e4:	1b64      	subs	r4, r4, r5
 80005e6:	10a4      	asrs	r4, r4, #2
 80005e8:	2600      	movs	r6, #0
 80005ea:	42a6      	cmp	r6, r4
 80005ec:	d105      	bne.n	80005fa <__libc_init_array+0x2e>
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005f4:	4798      	blx	r3
 80005f6:	3601      	adds	r6, #1
 80005f8:	e7ee      	b.n	80005d8 <__libc_init_array+0xc>
 80005fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80005fe:	4798      	blx	r3
 8000600:	3601      	adds	r6, #1
 8000602:	e7f2      	b.n	80005ea <__libc_init_array+0x1e>
 8000604:	08000858 	.word	0x08000858
 8000608:	08000858 	.word	0x08000858
 800060c:	08000858 	.word	0x08000858
 8000610:	0800085c 	.word	0x0800085c

08000614 <malloc>:
 8000614:	4b02      	ldr	r3, [pc, #8]	; (8000620 <malloc+0xc>)
 8000616:	4601      	mov	r1, r0
 8000618:	6818      	ldr	r0, [r3, #0]
 800061a:	f000 b823 	b.w	8000664 <_malloc_r>
 800061e:	bf00      	nop
 8000620:	24000004 	.word	0x24000004

08000624 <sbrk_aligned>:
 8000624:	b570      	push	{r4, r5, r6, lr}
 8000626:	4e0e      	ldr	r6, [pc, #56]	; (8000660 <sbrk_aligned+0x3c>)
 8000628:	460c      	mov	r4, r1
 800062a:	6831      	ldr	r1, [r6, #0]
 800062c:	4605      	mov	r5, r0
 800062e:	b911      	cbnz	r1, 8000636 <sbrk_aligned+0x12>
 8000630:	f000 f88c 	bl	800074c <_sbrk_r>
 8000634:	6030      	str	r0, [r6, #0]
 8000636:	4621      	mov	r1, r4
 8000638:	4628      	mov	r0, r5
 800063a:	f000 f887 	bl	800074c <_sbrk_r>
 800063e:	1c43      	adds	r3, r0, #1
 8000640:	d00a      	beq.n	8000658 <sbrk_aligned+0x34>
 8000642:	1cc4      	adds	r4, r0, #3
 8000644:	f024 0403 	bic.w	r4, r4, #3
 8000648:	42a0      	cmp	r0, r4
 800064a:	d007      	beq.n	800065c <sbrk_aligned+0x38>
 800064c:	1a21      	subs	r1, r4, r0
 800064e:	4628      	mov	r0, r5
 8000650:	f000 f87c 	bl	800074c <_sbrk_r>
 8000654:	3001      	adds	r0, #1
 8000656:	d101      	bne.n	800065c <sbrk_aligned+0x38>
 8000658:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800065c:	4620      	mov	r0, r4
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	24000090 	.word	0x24000090

08000664 <_malloc_r>:
 8000664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000668:	1ccd      	adds	r5, r1, #3
 800066a:	f025 0503 	bic.w	r5, r5, #3
 800066e:	3508      	adds	r5, #8
 8000670:	2d0c      	cmp	r5, #12
 8000672:	bf38      	it	cc
 8000674:	250c      	movcc	r5, #12
 8000676:	2d00      	cmp	r5, #0
 8000678:	4607      	mov	r7, r0
 800067a:	db01      	blt.n	8000680 <_malloc_r+0x1c>
 800067c:	42a9      	cmp	r1, r5
 800067e:	d905      	bls.n	800068c <_malloc_r+0x28>
 8000680:	230c      	movs	r3, #12
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	2600      	movs	r6, #0
 8000686:	4630      	mov	r0, r6
 8000688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800068c:	4e2e      	ldr	r6, [pc, #184]	; (8000748 <_malloc_r+0xe4>)
 800068e:	f000 f8b1 	bl	80007f4 <__malloc_lock>
 8000692:	6833      	ldr	r3, [r6, #0]
 8000694:	461c      	mov	r4, r3
 8000696:	bb34      	cbnz	r4, 80006e6 <_malloc_r+0x82>
 8000698:	4629      	mov	r1, r5
 800069a:	4638      	mov	r0, r7
 800069c:	f7ff ffc2 	bl	8000624 <sbrk_aligned>
 80006a0:	1c43      	adds	r3, r0, #1
 80006a2:	4604      	mov	r4, r0
 80006a4:	d14d      	bne.n	8000742 <_malloc_r+0xde>
 80006a6:	6834      	ldr	r4, [r6, #0]
 80006a8:	4626      	mov	r6, r4
 80006aa:	2e00      	cmp	r6, #0
 80006ac:	d140      	bne.n	8000730 <_malloc_r+0xcc>
 80006ae:	6823      	ldr	r3, [r4, #0]
 80006b0:	4631      	mov	r1, r6
 80006b2:	4638      	mov	r0, r7
 80006b4:	eb04 0803 	add.w	r8, r4, r3
 80006b8:	f000 f848 	bl	800074c <_sbrk_r>
 80006bc:	4580      	cmp	r8, r0
 80006be:	d13a      	bne.n	8000736 <_malloc_r+0xd2>
 80006c0:	6821      	ldr	r1, [r4, #0]
 80006c2:	3503      	adds	r5, #3
 80006c4:	1a6d      	subs	r5, r5, r1
 80006c6:	f025 0503 	bic.w	r5, r5, #3
 80006ca:	3508      	adds	r5, #8
 80006cc:	2d0c      	cmp	r5, #12
 80006ce:	bf38      	it	cc
 80006d0:	250c      	movcc	r5, #12
 80006d2:	4629      	mov	r1, r5
 80006d4:	4638      	mov	r0, r7
 80006d6:	f7ff ffa5 	bl	8000624 <sbrk_aligned>
 80006da:	3001      	adds	r0, #1
 80006dc:	d02b      	beq.n	8000736 <_malloc_r+0xd2>
 80006de:	6823      	ldr	r3, [r4, #0]
 80006e0:	442b      	add	r3, r5
 80006e2:	6023      	str	r3, [r4, #0]
 80006e4:	e00e      	b.n	8000704 <_malloc_r+0xa0>
 80006e6:	6822      	ldr	r2, [r4, #0]
 80006e8:	1b52      	subs	r2, r2, r5
 80006ea:	d41e      	bmi.n	800072a <_malloc_r+0xc6>
 80006ec:	2a0b      	cmp	r2, #11
 80006ee:	d916      	bls.n	800071e <_malloc_r+0xba>
 80006f0:	1961      	adds	r1, r4, r5
 80006f2:	42a3      	cmp	r3, r4
 80006f4:	6025      	str	r5, [r4, #0]
 80006f6:	bf18      	it	ne
 80006f8:	6059      	strne	r1, [r3, #4]
 80006fa:	6863      	ldr	r3, [r4, #4]
 80006fc:	bf08      	it	eq
 80006fe:	6031      	streq	r1, [r6, #0]
 8000700:	5162      	str	r2, [r4, r5]
 8000702:	604b      	str	r3, [r1, #4]
 8000704:	4638      	mov	r0, r7
 8000706:	f104 060b 	add.w	r6, r4, #11
 800070a:	f000 f879 	bl	8000800 <__malloc_unlock>
 800070e:	f026 0607 	bic.w	r6, r6, #7
 8000712:	1d23      	adds	r3, r4, #4
 8000714:	1af2      	subs	r2, r6, r3
 8000716:	d0b6      	beq.n	8000686 <_malloc_r+0x22>
 8000718:	1b9b      	subs	r3, r3, r6
 800071a:	50a3      	str	r3, [r4, r2]
 800071c:	e7b3      	b.n	8000686 <_malloc_r+0x22>
 800071e:	6862      	ldr	r2, [r4, #4]
 8000720:	42a3      	cmp	r3, r4
 8000722:	bf0c      	ite	eq
 8000724:	6032      	streq	r2, [r6, #0]
 8000726:	605a      	strne	r2, [r3, #4]
 8000728:	e7ec      	b.n	8000704 <_malloc_r+0xa0>
 800072a:	4623      	mov	r3, r4
 800072c:	6864      	ldr	r4, [r4, #4]
 800072e:	e7b2      	b.n	8000696 <_malloc_r+0x32>
 8000730:	4634      	mov	r4, r6
 8000732:	6876      	ldr	r6, [r6, #4]
 8000734:	e7b9      	b.n	80006aa <_malloc_r+0x46>
 8000736:	230c      	movs	r3, #12
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	4638      	mov	r0, r7
 800073c:	f000 f860 	bl	8000800 <__malloc_unlock>
 8000740:	e7a1      	b.n	8000686 <_malloc_r+0x22>
 8000742:	6025      	str	r5, [r4, #0]
 8000744:	e7de      	b.n	8000704 <_malloc_r+0xa0>
 8000746:	bf00      	nop
 8000748:	2400008c 	.word	0x2400008c

0800074c <_sbrk_r>:
 800074c:	b538      	push	{r3, r4, r5, lr}
 800074e:	4d06      	ldr	r5, [pc, #24]	; (8000768 <_sbrk_r+0x1c>)
 8000750:	2300      	movs	r3, #0
 8000752:	4604      	mov	r4, r0
 8000754:	4608      	mov	r0, r1
 8000756:	602b      	str	r3, [r5, #0]
 8000758:	f7ff fe9c 	bl	8000494 <_sbrk>
 800075c:	1c43      	adds	r3, r0, #1
 800075e:	d102      	bne.n	8000766 <_sbrk_r+0x1a>
 8000760:	682b      	ldr	r3, [r5, #0]
 8000762:	b103      	cbz	r3, 8000766 <_sbrk_r+0x1a>
 8000764:	6023      	str	r3, [r4, #0]
 8000766:	bd38      	pop	{r3, r4, r5, pc}
 8000768:	24000094 	.word	0x24000094

0800076c <_raise_r>:
 800076c:	291f      	cmp	r1, #31
 800076e:	b538      	push	{r3, r4, r5, lr}
 8000770:	4604      	mov	r4, r0
 8000772:	460d      	mov	r5, r1
 8000774:	d904      	bls.n	8000780 <_raise_r+0x14>
 8000776:	2316      	movs	r3, #22
 8000778:	6003      	str	r3, [r0, #0]
 800077a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800077e:	bd38      	pop	{r3, r4, r5, pc}
 8000780:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000782:	b112      	cbz	r2, 800078a <_raise_r+0x1e>
 8000784:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8000788:	b94b      	cbnz	r3, 800079e <_raise_r+0x32>
 800078a:	4620      	mov	r0, r4
 800078c:	f000 f830 	bl	80007f0 <_getpid_r>
 8000790:	462a      	mov	r2, r5
 8000792:	4601      	mov	r1, r0
 8000794:	4620      	mov	r0, r4
 8000796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800079a:	f000 b817 	b.w	80007cc <_kill_r>
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d00a      	beq.n	80007b8 <_raise_r+0x4c>
 80007a2:	1c59      	adds	r1, r3, #1
 80007a4:	d103      	bne.n	80007ae <_raise_r+0x42>
 80007a6:	2316      	movs	r3, #22
 80007a8:	6003      	str	r3, [r0, #0]
 80007aa:	2001      	movs	r0, #1
 80007ac:	e7e7      	b.n	800077e <_raise_r+0x12>
 80007ae:	2400      	movs	r4, #0
 80007b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80007b4:	4628      	mov	r0, r5
 80007b6:	4798      	blx	r3
 80007b8:	2000      	movs	r0, #0
 80007ba:	e7e0      	b.n	800077e <_raise_r+0x12>

080007bc <raise>:
 80007bc:	4b02      	ldr	r3, [pc, #8]	; (80007c8 <raise+0xc>)
 80007be:	4601      	mov	r1, r0
 80007c0:	6818      	ldr	r0, [r3, #0]
 80007c2:	f7ff bfd3 	b.w	800076c <_raise_r>
 80007c6:	bf00      	nop
 80007c8:	24000004 	.word	0x24000004

080007cc <_kill_r>:
 80007cc:	b538      	push	{r3, r4, r5, lr}
 80007ce:	4d07      	ldr	r5, [pc, #28]	; (80007ec <_kill_r+0x20>)
 80007d0:	2300      	movs	r3, #0
 80007d2:	4604      	mov	r4, r0
 80007d4:	4608      	mov	r0, r1
 80007d6:	4611      	mov	r1, r2
 80007d8:	602b      	str	r3, [r5, #0]
 80007da:	f7ff fe40 	bl	800045e <_kill>
 80007de:	1c43      	adds	r3, r0, #1
 80007e0:	d102      	bne.n	80007e8 <_kill_r+0x1c>
 80007e2:	682b      	ldr	r3, [r5, #0]
 80007e4:	b103      	cbz	r3, 80007e8 <_kill_r+0x1c>
 80007e6:	6023      	str	r3, [r4, #0]
 80007e8:	bd38      	pop	{r3, r4, r5, pc}
 80007ea:	bf00      	nop
 80007ec:	24000094 	.word	0x24000094

080007f0 <_getpid_r>:
 80007f0:	f7ff be2d 	b.w	800044e <_getpid>

080007f4 <__malloc_lock>:
 80007f4:	4801      	ldr	r0, [pc, #4]	; (80007fc <__malloc_lock+0x8>)
 80007f6:	f000 b809 	b.w	800080c <__retarget_lock_acquire_recursive>
 80007fa:	bf00      	nop
 80007fc:	24000098 	.word	0x24000098

08000800 <__malloc_unlock>:
 8000800:	4801      	ldr	r0, [pc, #4]	; (8000808 <__malloc_unlock+0x8>)
 8000802:	f000 b804 	b.w	800080e <__retarget_lock_release_recursive>
 8000806:	bf00      	nop
 8000808:	24000098 	.word	0x24000098

0800080c <__retarget_lock_acquire_recursive>:
 800080c:	4770      	bx	lr

0800080e <__retarget_lock_release_recursive>:
 800080e:	4770      	bx	lr

08000810 <_init>:
 8000810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000812:	bf00      	nop
 8000814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000816:	bc08      	pop	{r3}
 8000818:	469e      	mov	lr, r3
 800081a:	4770      	bx	lr

0800081c <_fini>:
 800081c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800081e:	bf00      	nop
 8000820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000822:	bc08      	pop	{r3}
 8000824:	469e      	mov	lr, r3
 8000826:	4770      	bx	lr
